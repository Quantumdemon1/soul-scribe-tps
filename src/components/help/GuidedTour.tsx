import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { X, ChevronLeft, ChevronRight, BookOpen, Brain, Target, TrendingUp } from 'lucide-react';

interface TourStep {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  target?: string;
}

const tourSteps: TourStep[] = [
  {
    id: 'welcome',
    title: 'Welcome to Your Personality Profile',
    description: 'This comprehensive analysis is based on the Triadic Personality System (TPS), evaluating 36 personality traits across 12 triads and 4 core domains.',
    icon: <BookOpen className="w-5 h-5" />
  },
  {
    id: 'overview',
    title: 'Overview Tab',
    description: 'View your personality framework correlations (MBTI, Enneagram, etc.), trait visualization, and domain breakdowns.',
    icon: <Target className="w-5 h-5" />
  },
  {
    id: 'insights',
    title: 'Core Insights',
    description: 'Discover detailed analysis of your personality patterns, strengths, and behavioral tendencies.',
    icon: <Brain className="w-5 h-5" />
  },
  {
    id: 'ai-insights',
    title: 'AI-Powered Analysis',
    description: 'Get personalized insights generated by advanced AI, including career recommendations and relationship dynamics.',
    icon: <Brain className="w-5 h-5" />
  },
  {
    id: 'development',
    title: 'Personal Development',
    description: 'Access personalized growth recommendations and development strategies based on your unique profile.',
    icon: <TrendingUp className="w-5 h-5" />
  }
];

interface GuidedTourProps {
  onClose: () => void;
  isOpen: boolean;
}

export const GuidedTour: React.FC<GuidedTourProps> = ({ onClose, isOpen }) => {
  const [currentStep, setCurrentStep] = useState(0);

  if (!isOpen) return null;

  const handleNext = () => {
    if (currentStep < tourSteps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      onClose();
    }
  };

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const currentTourStep = tourSteps[currentStep];

  return (
    <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4">
      <Card className="max-w-md w-full">
        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
          <div className="flex items-center gap-2">
            {currentTourStep.icon}
            <CardTitle className="text-lg">{currentTourStep.title}</CardTitle>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={onClose}
          >
            <X className="w-4 h-4" />
          </Button>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-muted-foreground">
            {currentTourStep.description}
          </p>
          
          <div className="flex items-center justify-between">
            <Badge variant="outline">
              {currentStep + 1} of {tourSteps.length}
            </Badge>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handlePrev}
                disabled={currentStep === 0}
              >
                <ChevronLeft className="w-4 h-4 mr-1" />
                Previous
              </Button>
              <Button
                size="sm"
                onClick={handleNext}
              >
                {currentStep === tourSteps.length - 1 ? 'Finish' : 'Next'}
                {currentStep < tourSteps.length - 1 && <ChevronRight className="w-4 h-4 ml-1" />}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};